on:
  push:
    branches:
    - master
  pull_request:
    types: [opened, synchronize, edited]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Build binaries
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    # The ubuntu-22.04 runner has clang-15 installed, but uses clang-14 by default.
    # See https://github.com/actions/runner-images/blob/main/images/ubuntu/scripts/build/install-clang.sh
    - name: Set up Clang
      run: |
        readonly version=15
        readonly priority=50

        sudo update-alternatives --remove-all clang++
        sudo update-alternatives --remove-all clang

        sudo apt remove clang-14
        sudo apt install "clang-${version}" "lld-${version}" "libc++-${version}-dev" "libc++abi-${version}-dev"

        sudo update-alternatives \
          --verbose \
          --install /usr/bin/clang  clang   "/usr/bin/clang-${version}" "${priority}" \
          --slave /usr/bin/clang++  clang++ "/usr/bin/clang++-${version}" \
          --slave /usr/bin/lld      lld     "/usr/bin/lld-${version}" \
          --slave /usr/bin/ld.lld   ld.lld  "/usr/bin/ld.lld-${version}"
        sudo update-alternatives \
          --set                     clang   "/usr/bin/clang-${version}"

    - name: Set up Bazel
      uses: world-federation-of-advertisers/actions/setup-bazel@v2

    - name: Get Bazel cache params
      id: get-cache-params
      uses: world-federation-of-advertisers/actions/bazel-get-cache-params@v2
      with:
        cache-version: 1

    - name: Restore Bazel cache
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.get-cache-params.outputs.cache-path }}
        key: ${{ steps.get-cache-params.outputs.cache-key }}
        restore-keys: |-
          ${{ steps.get-cache-params.outputs.restore-key }}

    - name: Build
      run: >
        bazel build
        --compilation_mode opt
        --config libc++
        //binaries:gateway_main

    - name: Save Bazel cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: ${{ steps.get-cache-params.outputs.cache-path }}
        key: ${{ steps.get-cache-params.outputs.cache-key }}

    - name: Copy binaries
      id: copy-binaries
      run: |
        readonly bin_path="$RUNNER_TEMP/binaries"
        mkdir -p "${bin_path}"
        cp bazel-bin/binaries/emulator_main "${bin_path}/"
        cp bazel-bin/binaries/gateway_main_/gateway_main "${bin_path}/"

        echo "path=${bin_path}" >> "$GITHUB_OUTPUT"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries-linux-amd64
        path: ${{ steps.copy-binaries.outputs.path }}
        compression-level: 0

    - name: Upload release asset
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BIN_PATH: ${{ steps.copy-binaries.outputs.path }}
      run: |
        cd "$BIN_PATH"
        readonly archive_path="$RUNNER_TEMP/binaries-linux-amd64.tar.gz"
        tar -c -f "${archive_path}" *
        gh release upload "$GITHUB_REF_NAME" "${archive_path}"
